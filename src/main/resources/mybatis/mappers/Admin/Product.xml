<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.bookhub.admin.mapper.ProductMapper">

    <!-- 재사용 조건절 -->
    <sql id="where">
        <where>
            <!-- 검색어 -->
            <if test="filter.opt != null">
                <choose>
                    <when test="filter.opt == 'productName'">
                        B.BOOK_NAME LIKE CONCAT('%', #{filter.keyword}, '%')
                    </when>
                    <when test="filter.opt == 'authorName'">
                        AND B.BOOK_NO IN (SELECT BA.BOOK_NO
                                          FROM BOOK_AUTHOR BA
                                          INNER JOIN AUTHOR A ON BA.AUTHOR_NO = A.AUTHOR_NO
                                          WHERE A.AUTHOR_NAME =  #{filter.keyword})
                    </when>
                    <when test="filter.opt == 'publisherName'">
                        AND P.PUBLISHER_NAME = #{filter.keyword}
                    </when>
                </choose>
            </if>

            <!-- 카테고리 -->
            <choose>
                <when test="filter.topCategoryNo != 0">
                    AND B.CATEGORY_NO IN (SELECT CATEGORY_NO
                    FROM BookHub.CATEGORY
                    WHERE PARENT_CATEGORY_NO = #{filter.topCategoryNo})
                </when>
                <when test="filter.secondCategoryNo != 0">
                    AND B.CATEGORY_NO = #{filter.secondCategoryNo}
                </when>
            </choose>

            <!-- 기간 검색 -->
            <if test="filter.moreDate != '' and filter.lessDate != ''">
                <choose>
                    <when test="filter.dateOpt == 'createdDate'">
                        AND B.BOOK_CREATED_DATE BETWEEN CONCAT(#{filter.moreDate},' 00:00:00')
                                                AND CONCAT(#{filter.lessDate}, ' 23:59:59')
                    </when>
                    <when test="filter.dateOpt == 'updatedDate'">
                        AND B.BOOK_UPDATED_DATE BETWEEN CONCAT(#{filter.moreDate},' 00:00:00')
                                                AND CONCAT(#{filter.lessDate}, ' 23:59:59')
                    </when>
                    <when test="filter.dateOpt == 'publishedDate'">
                        AND B.BOOK_PUBLISHED_DATE BETWEEN #{filter.moreDate} AND #{filter.lessDate}
                    </when>
                </choose>
            </if>

            <if test="filter.moreDate == '' and filter.lessDate != ''">
                <choose>
                    <when test="filter.dateOpt == 'createdDate'">
                        AND B.BOOK_CREATED_DATE BETWEEN '0001-01-01 00:00:00'
                                                AND CONCAT(#{filter.lessDate}, ' 23:59:59')
                    </when>
                    <when test="filter.dateOpt == 'updatedDate'">
                        AND B.BOOK_UPDATED_DATE BETWEEN '0001-01-01 00:00:00'
                                                AND CONCAT(#{filter.lessDate}, ' 23:59:59')
                    </when>
                    <when test="filter.dateOpt == 'publishedDate'">
                        AND B.BOOK_PUBLISHED_DATE BETWEEN '0001-01-01' AND #{filter.lessDate}
                    </when>
                </choose>
            </if>

            <if test="filter.moreDate != '' and filter.lessDate == ''">
                <choose>
                    <when test="filter.dateOpt == 'createdDate'">
                        AND B.BOOK_CREATED_DATE BETWEEN CONCAT(#{filter.moreDate},' 00:00:00')
                                                AND '9999-12-31 23:59:59'
                    </when>
                    <when test="filter.dateOpt == 'updatedDate'">
                        AND B.BOOK_UPDATED_DATE BETWEEN CONCAT(#{filter.moreDate},' 00:00:00')
                                                AND '9999-12-31 23:59:59'
                    </when>
                    <when test="filter.dateOpt == 'publishedDate'">
                        AND B.BOOK_PUBLISHED_DATE BETWEEN #{filter.moreDate} AND '9999-12-31'
                    </when>
                </choose>
            </if>

            <!-- 판매 상태 -->
            <if test="filter.status != null">
                AND B.BOOK_STATUS IN
                    <foreach collection="filter.status" item="status" open="(" close=")" separator=",">
                        #{status}
                    </foreach>
            </if>

            <!-- 재고 -->
            <if test="filter.moreStock != 0">
                AND B.BOOK_STOCK >= #{filter.moreStock}
            </if>
            <if test="filter.lessStock != 0">
                AND B.BOOK_STOCK &lt;= #{filter.lessStock}
            </if>

            <!-- 출판사 -->
            <if test="filter.publisherNo != 0">
                AND P.PUBLISHER_NO = #{filter.publisherNo}
            </if>
        </where>
    </sql>

    <select id="getTotalRows" resultType="int">
        SELECT
            count(DISTINCT B.BOOK_NO)
        FROM
                BookHub.BOOK B
                INNER JOIN PUBLISHER P ON B.PUBLISHER_NO = P.PUBLISHER_NO
                INNER JOIN BOOK_IMAGES BI ON B.BOOK_NO = BI.BOOK_NO
                INNER JOIN CATEGORY CA ON B.CATEGORY_NO = CA.CATEGORY_NO
        <include refid="where"></include>
    </select>

    <select id="getBooks" resultType="com.example.bookhub.admin.dto.BookList">
    		SELECT
                    B.BOOK_NO                                                   AS no,
    		        BI.BOOK_IMAGE_COVER			                                AS image,
    				B.BOOK_NAME           			                            AS bookName,
                    B.BOOK_LIST_PRICE			                                AS listPrice,
                    ROUND(B.BOOK_LIST_PRICE * (1 - B.BOOK_DISCOUNT_RATE))		AS sellingPrice,
                    B.BOOK_STOCK                                                AS stock,
                    B.BOOK_STATUS                                               AS status,
                    B.BOOK_CREATED_DATE                                         AS createdDate,
                    B.BOOK_UPDATED_DATE                                         AS updatedDate,
                    B.BOOK_PUBLISHED_DATE                                       AS publishedDate,
                    (SELECT GROUP_CONCAT(A.AUTHOR_NAME SEPARATOR ', ')
                    FROM BOOK_AUTHOR BA
                    INNER JOIN AUTHOR A ON BA.AUTHOR_NO = A.AUTHOR_NO
                    WHERE BA.BOOK_NO = B.BOOK_NO)                               AS authorName

    		FROM
                    BookHub.BOOK B
                    INNER JOIN PUBLISHER P ON B.PUBLISHER_NO = P.PUBLISHER_NO
                    INNER JOIN BOOK_IMAGES BI ON B.BOOK_NO = BI.BOOK_NO
                    INNER JOIN CATEGORY CA ON B.CATEGORY_NO = CA.CATEGORY_NO

            <include refid="where"></include>

            <choose>
                    <when test="sort == 'productName'">
                        ORDER BY B.BOOK_NAME ASC
                    </when>
                    <when test="sort == 'highPrice'">
                        ORDER BY B.BOOK_LIST_PRICE DESC
                    </when>
                    <when test="sort == 'lowPrice'">
                        ORDER BY B.BOOK_LIST_PRICE ASC
                    </when>
                    <when test="sort == 'highSellingPrice'">
                        ORDER BY sellingPrice DESC
                    </when>
                    <when test="sort == 'lowSellingPrice'">
                        ORDER BY sellingPrice ASC
                    </when>
                    <when test="sort == 'highStock'">
                        ORDER BY B.BOOK_STOCK DESC
                    </when>
                    <when test="sort == 'lowStock'">
                        ORDER BY B.BOOK_STOCK ASC
                    </when>
                    <when test="sort == 'recentlyCreated'">
                        ORDER BY B.BOOK_CREATED_DATE DESC
                    </when>
                    <when test="sort == 'recentlyUpdated'">
                        ORDER BY B.BOOK_UPDATED_DATE DESC
                    </when>
                    <when test="sort == 'recentlyPublished'">
                        ORDER BY B.BOOK_PUBLISHED_DATE DESC
                    </when>
            </choose>

            LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getPublishers" resultType="com.example.bookhub.product.vo.Publisher">
            SELECT
                PUBLISHER_NO AS no,
                PUBLISHER_NAME AS name
            FROM
                BookHub.PUBLISHER
            ORDER BY
                PUBLISHER_NAME ASC
    </select>

    <select id="getAuthors" resultType="com.example.bookhub.product.vo.Author">
            SELECT
                AUTHOR_NO AS no,
                AUTHOR_NAME AS name
            FROM
                BookHub.AUTHOR
            ORDER BY
                AUTHOR_NAME ASC
    </select>

    <update id="deleteProductByNo" parameterType="long">
        UPDATE BookHub.BOOK
        SET BOOK_DELETED_YN = 'Y',
            BOOK_STATUS = '삭제'
        WHERE BOOK_NO = #{deletedProductNo}
    </update>

    <select id="getProductByNo" parameterType="long" resultType="com.example.bookhub.admin.dto.Product">
        SELECT
                B.BOOK_NO                   AS no,
                B.CATEGORY_NO               AS secondCategoryNo,
                B.BOOK_NAME                 AS name,
                B.BOOK_DESCRIPTION          AS description,
                B.PUBLISHER_NO              AS publisherNo,
                B.BOOK_STATUS               AS status,
                B.BOOK_LIST_PRICE           AS listPrice,
                B.BOOK_DISCOUNT_RATE        AS discountRate,
                B.BOOK_STOCK                AS stock,
                B.BOOK_STOCK_NOTIFICATION   AS stockNotification,
                BI.BOOK_IMAGE_COVER         AS coverImage,
                BI.BOOK_IMAGE_THUMBNAIL     AS thumbnailImage,
                BI.BOOK_IMAGE_DESCRIPTION   AS descriptionImage
        FROM
                BookHub.BOOK B
                INNER JOIN BOOK_IMAGES BI ON B.BOOK_NO = BI.BOOK_NO
        WHERE
                B.BOOK_NO = #{no}
    </select>

    <select id="getSuperCategoryNoBySubCategoryNo" parameterType="long" resultType="long">
        SELECT
                CATEGORY_NO
        FROM
                BookHub.CATEGORY
        WHERE
                CATEGORY_NO = (SELECT PARENT_CATEGORY_NO
                               FROM BookHub.CATEGORY
                               WHERE CATEGORY_NO = #{secondCategoryNo});
    </select>

    <update id="modifyProduct" parameterType="com.example.bookhub.admin.dto.Product">
        UPDATE
                BookHub.BOOK
        SET
                CATEGORY_NO = #{secondCategoryNo},
                BOOK_NAME = #{name},
                BOOK_DESCRIPTION = #{description},
                PUBLISHER_NO = #{publisherNo},
                BOOK_STATUS = #{status},
                BOOK_LIST_PRICE = #{listPrice},
                BOOK_DISCOUNT_RATE = #{discountRate},
                BOOK_STOCK = #{stock},
                BOOK_STOCK_NOTIFICATION = #{stockNotification}
        WHERE
                BOOK_NO = #{no}
    </update>

    <insert id="registerProduct" parameterType="com.example.bookhub.admin.dto.Product">
        <selectKey resultType="long" keyProperty="no" order="BEFORE">
            SELECT max(BOOK_NO) + 1
            FROM BookHub.BOOK
        </selectKey>
        INSERT INTO BookHub.BOOK
        (BOOK_NO, BOOK_NAME, BOOK_PUBLISHED_DATE, BOOK_DESCRIPTION, ISBN, BOOK_LIST_PRICE, PUBLISHER_NO, CATEGORY_NO, BOOK_PAGES, BOOK_LANGUAGE, BOOK_WEIGHT, BOOK_INDEX, BOOK_TOTAL_NUMBER, BOOK_SIZE, BOOK_DISCOUNT_RATE, BOOK_STOCK, BOOK_STATUS, BOOK_STOCK_NOTIFICATION)
        VALUES
        (#{no} , #{name}, #{publishedDate}, #{description}, #{isbn}, #{listPrice}, #{publisherNo}, #{categoryNo}, #{pages}, #{language}, #{weight}, #{index}, #{totalNumber}, #{size}, #{discountRate}, #{stock}, #{status}, #{stockNotification})
    </insert>

    <insert id="registerImage" parameterType="com.example.bookhub.admin.dto.Product">
        <selectKey resultType="long" keyProperty="no" order="BEFORE">
            SELECT max(BOOK_NO)
            FROM BookHub.BOOK
        </selectKey>
        INSERT INTO BookHub.BOOK_IMAGES
        (BOOK_NO, BOOK_IMAGE_THUMBNAIL, BOOK_IMAGE_COVER, BOOK_IMAGE_DESCRIPTION)
        VALUES
        (#{no}, #{thumbnailImg}, #{coverImg}, #{descriptionImg})
    </insert>

</mapper>
